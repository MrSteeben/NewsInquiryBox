{"version":3,"sources":["ShowArticles.js","App.js","serviceWorker.js","index.js"],"names":["ShowArticles","props","articles","map","article","index","key","className","src","urlToImage","alt","href","url","title","author","publishedAt","description","source","name","App","apiCall","searchValue","axios","method","responseType","params","reqUrl","q","language","pageSize","apiKey","then","response","setState","data","catch","console","log","handleChange","event","userInput","target","value","handleClick","e","preventDefault","state","this","onSubmit","action","htmlFor","onChange","type","id","onClick","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"wUA4BeA,EA1BM,SAACC,GAClB,OACIA,EAAMC,SAASC,KAAK,SAACC,EAASC,GAC1B,OACI,yBAAKC,IAAKD,EAAOE,UAAU,oBAEvB,6BACI,yBAAKC,IAAKJ,EAAQK,WAAYC,IAAI,MAEtC,yBAAKH,UAAU,cAEX,uBAAGI,KAAMP,EAAQQ,KAAK,4BAAKR,EAAQS,QACnC,4BAAKT,EAAQU,QACb,8BAAOV,EAAQW,aACf,2BAAIX,EAAQY,aACZ,uBAAGL,KAAMP,EAAQQ,KAAjB,gBACA,uBAAGL,UAAU,cAAb,WAAmCH,EAAQa,OAAOC,YCqF3DC,G,wDAhGX,aAAe,IAAD,8BACV,gBAQJC,QAAU,WAAkC,IAAjCC,EAAgC,uDAApB,gBACnBC,IAAM,CACFV,IAAK,8BACLW,OAAQ,MACRC,aAAc,OACdC,OAAQ,CACJC,OAAQ,oCACRD,OAAQ,CACJE,EAAGN,EACHO,SAAU,KACVC,SAAU,GACVC,OAAQ,uCAIvBC,MAAM,SAACC,GAEJ,EAAKC,SAAS,CACV/B,SAAU8B,EAASE,KAAKhC,cAI/BiC,OAAO,WAEJC,QAAQC,IAAI,uDAjCF,EA0CdC,aAAe,SAACC,GACZ,EAAKN,SAAS,CACVO,UAAWD,EAAME,OAAOC,SA5ClB,EAgDdC,YAAc,SAACC,GACXA,EAAEC,iBAEF,EAAKzB,QAAQ,EAAK0B,MAAMN,WAExB,EAAKP,SAAS,CACVO,UAAW,MApDf,EAAKM,MAAQ,CACT5C,SAAU,GACVsC,UAAW,IAJL,E,gEAuCVO,KAAK3B,Y,+BAuBL,OACI,yBAAKb,UAAU,kBACX,yBAAKA,UAAU,YACX,qDAGJ,kCACI,0BAAMyC,SAAUD,KAAKJ,YAAaM,OAAO,UACrC,2BAAOC,QAAQ,cAAf,wCACA,2BAAOC,SAAUJ,KAAKT,aAAcI,MAAOK,KAAKD,MAAMN,UAAWY,KAAK,OAAOC,GAAG,eAEhF,4BAAQC,QAASP,KAAKJ,aAAtB,YAIR,6BAEQI,KAAKD,MAAM5C,SAASqD,OAAS,EAC3B,kBAAC,EAAD,CAAcrD,SAAU6C,KAAKD,MAAM5C,WACnC,qD,GAlFRsD,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.4d85778e.chunk.js","sourcesContent":["import React from 'react';\n\nconst ShowArticles = (props) => {\n    return(\n        props.articles.map( (article, index) => {\n            return (\n                <div key={index} className=\"articleContainer\">\n                \n                    <div>\n                        <img src={article.urlToImage} alt=\"\" />\n                    </div>\n                    <div className=\"contentBox\">\n\n                        <a href={article.url}><h2>{article.title}</h2></a>\n                        <h3>{article.author}</h3>\n                        <time>{article.publishedAt}</time>\n                        <p>{article.description}</p>\n                        <a href={article.url}>Read more...</a>\n                        <p className=\"newsSource\">Source: {article.source.name}</p>\n\n                    </div>\n                </div>\n            )\n        }) \n\n    )\n}\n\nexport default ShowArticles","import React, { Component } from 'react';\nimport axios from 'axios';\nimport ShowArticles from './ShowArticles'\n\nimport './App.scss';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            articles: [],\n            userInput: ''\n        }\n    }\n    \n    // Call the news API with a default search value of Miscellaneous and store into initial state\n    apiCall = (searchValue='Miscellaneous') => {\n        axios({\n            url: 'https://proxy.hackeryou.com',\n            method: 'GET',\n            responseType: 'json',\n            params: {\n                reqUrl: 'https://newsapi.org/v2/everything',\n                params: {\n                    q: searchValue,\n                    language: 'en',\n                    pageSize: 25,\n                    apiKey: 'a488805f03984505903cf55f276798af',\n                }\n            }\n    })\n    .then( (response) => {\n\n        this.setState({\n            articles: response.data.articles\n        })\n\n    })\n    .catch( () => {\n\n        console.log(\"Something happened to axios call, look into it!\");\n    })\n\n    }\n    \n    componentDidMount() {\n        this.apiCall();\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            userInput: event.target.value\n        })\n    }\n    \n    handleClick = (e) => {\n        e.preventDefault();\n        // console.log(\"click is working\");\n        this.apiCall(this.state.userInput);\n\n        this.setState({\n            userInput: \"\"\n        })\n        // , () => {\n        //     console.log(this.state.userInput);\n        // })\n    }\n\n    render() {\n        return (\n            <div className=\"header wrapper\">\n                <div className=\"siteName\">\n                    <h1>The News Inquiry Box</h1>\n                </div>\n                \n                <fieldset>\n                    <form onSubmit={this.handleClick} action=\"submit\">\n                        <label htmlFor=\"newArticle\">Search for a particular news article</label>\n                        <input onChange={this.handleChange} value={this.state.userInput} type=\"text\" id=\"newArticle\" />\n\n                        <button onClick={this.handleClick}>Search</button>\n                    </form>\n                </fieldset> \n\n                <div>\n                    {\n                        this.state.articles.length > 0 \n                        ? <ShowArticles articles={this.state.articles} />\n                        : <p>Try search again</p>//add a NoArticles.js\n                    }\n                    \n                </div>\n            </div>\n\n        // Will need a ternary operator for displaying Articles and NoArticles\n        // Articles will display if result > 0, NoArticles will display if articles = 0\n\n        );\n    }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}